"""
This type stub file was generated by pyright.
"""

from abc import ABC, abstractmethod
from typing import Optional, Union

"""base translator class"""
__copyright__ = ...
class BaseTranslator(ABC):
    """
    Abstract class that serve as a base translator for other different translators
    """
    def __init__(self, base_url: str = ..., languages: dict = ..., source: str = ..., target: str = ..., payload_key: Optional[str] = ..., element_tag: Optional[str] = ..., element_query: Optional[dict] = ..., **url_params) -> None:
        """
        @param source: source language to translate from
        @param target: target language to translate to
        """
        ...
    
    @property
    def source(self): # -> str:
        ...
    
    @source.setter
    def source(self, lang): # -> None:
        ...
    
    @property
    def target(self): # -> str:
        ...
    
    @target.setter
    def target(self, lang): # -> None:
        ...
    
    def get_supported_languages(self, as_dict: bool = ..., **kwargs) -> Union[list, dict]:
        """
        return the supported languages by the Google translator
        @param as_dict: if True, the languages will be returned as a dictionary
        mapping languages to their abbreviations
        @return: list or dict
        """
        ...
    
    def is_language_supported(self, language: str, **kwargs) -> bool:
        """
        check if the language is supported by the translator
        @param language: a string for 1 language
        @return: bool or raise an Exception
        """
        ...
    
    @abstractmethod
    def translate(self, text: str, **kwargs) -> str:
        """
        translate a text using a translator under the hood and return
        the translated text
        @param text: text to translate
        @param kwargs: additional arguments
        @return: str
        """
        ...
    


